/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2017-05-31 10:51:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class deviceList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv = \"Content-Type\" content = \"text/html; charset=UTF-8\"/>\n");
      out.write("        <link href = \"/css/device.css\" rel=\"stylesheet\" type=\"text/css\"/>\n");
      out.write("        <script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"></script>\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    <body>\n");
      out.write("\n");
      out.write("        <div ng-app=\"myApp\" ng-controller=\"tableCtrl\">\n");
      out.write("\n");
      out.write("           <table cellspacing = 0 cell-padding = 0 class = \"device_table\" ng-repeat = \"(key,value) in map\">\n");
      out.write("                <tr class = \"device_title_tr\">\n");
      out.write("                    <td colspan = \"2\" class = \"device_td\">{{key}}</td>\n");
      out.write("                </tr>\n");
      out.write("\n");
      out.write("                <tr class = \"device_title_tr\">\n");
      out.write("                    <td class = \"device_td\">index</td>\n");
      out.write("                    <td class = \"device_td\">id</td>\n");
      out.write("                </tr>\n");
      out.write("\n");
      out.write("                <tr class = \"device_value_tr\" ng-repeat = \"x in value\">\n");
      out.write("                    <td class = \"device_td\">{{$index + 1}}</td>\n");
      out.write("                    <td class = \"device_td\"><a href = \"/device/detail?did={{x}}\">{{x}}</td>\n");
      out.write("                </tr>\n");
      out.write("\n");
      out.write("           </table>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            var app = angular.module('myApp', []);\n");
      out.write("            app.controller('tableCtrl', function($scope, $http, $interval) {\n");
      out.write("                $scope.loadData = function () {\n");
      out.write("                    $http.get(\"/device/getAllDevice\")\n");
      out.write("                    .then(function (result) {\n");
      out.write("                        console.log(result)\n");
      out.write("                        $scope.map = result.data\n");
      out.write("                    });\n");
      out.write("                };\n");
      out.write("                $scope.loadData();\n");
      out.write("\n");
      out.write("                var autoRefresh;\n");
      out.write("                autoRefresh = $interval($scope.loadData, 6000);\n");
      out.write("                $scope.stopAutoRefresh = function () {\n");
      out.write("                    if (autoRefresh) {\n");
      out.write("                        $interval.cancel(autoRefresh);\n");
      out.write("                        autoRefresh = null;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                $scope.$on('$destroy', function() {\n");
      out.write("                    $scope.stopAutoRefresh();\n");
      out.write("                });\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
