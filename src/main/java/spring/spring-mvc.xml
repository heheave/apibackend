<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.sjtu.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:component-scan base-package="com.sjtu.pojo"/>
    <context:component-scan base-package="com.sjtu.dao"/>
    <context:component-scan base-package="com.sjtu.service"/>
    <!--HandlerMapping 无需配置，springmvc可以默认启动-->

    <!--静态资源映射-->
    <!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下-->
    <!--<mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>-->
    <!--<mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>-->
    <!--<mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/>-->

    <!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下-->
    <mvc:resources mapping="/css/**" location="/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/statics/js/"/>
    <mvc:resources mapping="/images/**" location="/statics/images/"/>
    <mvc:resources mapping="/bs/**" location="/statics/bstrap/"/>
    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <mvc:interceptors>
        <!-- 多个拦截器，顺序执行 -->
        <mvc:interceptor>
            <!-- /** 表示所有的url，包括子url路径 -->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/login/**"/>
            <mvc:exclude-mapping path="/css/**"/>
            <mvc:exclude-mapping path="/js/**"/>
            <mvc:exclude-mapping path="/images/**"/>
            <mvc:exclude-mapping path="/bs/**"/>
            <mvc:exclude-mapping path="/fi/**"/>
            <bean class="com.sjtu.intercepter.AuthInterceptor"></bean>

        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- springmvc文件上传需要配置的节点-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <bean class="com.sjtu.deamon.LauncherStart"/>
    <bean class="com.sjtu.deamon.LauncherStop"/>

    <!-- for service -->
    <bean class="com.sjtu.service.AppDeviceService"/>
    <bean class="com.sjtu.service.AppGroupService"/>
    <bean class="com.sjtu.service.AppService"/>
    <bean class="com.sjtu.service.AppShowService"/>
    <!-- <bean class="com.sjtu.service.DeviceConfigService"/> -->
    <bean class="com.sjtu.service.DeviceService"/>
    <bean class="com.sjtu.service.DeviceMonitorService"/>
    <bean class="com.sjtu.service.ConfigEntryService"/>
    <bean class="com.sjtu.service.UserService"/>
    <bean class="com.sjtu.service.PointerService"/>

    <!-- for dao -->
    <bean id = "dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass"><value>com.mysql.jdbc.Driver</value></property>
        <property name="jdbcUrl"><value>jdbc:mysql://localhost:3306/saas?useUnicode=true&amp;characterEncoding=utf8</value></property>
        <property name="user"><value>root</value></property>
        <property name="password"><value>heheave</value></property>
        <property name="maxPoolSize"><value>40</value></property>
        <property name="minPoolSize"><value>5</value></property>
        <property name="initialPoolSize"><value>5</value></property>
        <property name="maxIdleTime"><value>1800</value></property>
        <property name="maxStatements"><value>0</value></property>
        <property name="acquireIncrement"><value>2</value></property>
        <property name="acquireRetryAttempts"><value>30</value></property>
    </bean>

    <bean class="com.sjtu.dao.CacheDAO"/>

    <bean class="com.sjtu.dao.AppDAO"/>
    <bean class="com.sjtu.dao.AppDeviceDAO"/>
    <bean class="com.sjtu.dao.AppGroupDAO"/>
    <bean class="com.sjtu.dao.AppShowDAO"/>
    <bean class="com.sjtu.dao.DeviceConfigDAO"/>
    <bean class="com.sjtu.dao.RedisDAO"/>
    <bean class="com.sjtu.dao.DeviceDAO"/>
    <bean class="com.sjtu.dao.DeviceMonitorDAO"/>
    <bean class="com.sjtu.dao.ConfigEntryDAO"/>
    <bean class="com.sjtu.dao.UserDAO"/>
    <bean class="com.sjtu.dao.PointerDAO"/>

</beans>